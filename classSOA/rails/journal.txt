2013/10/13

開啟一個 Rails 伺服器
rails s
預設是使用 Port 3000 和 development 環境，如果需要指定：
rails s -p 4000 -e production

使用rails console(可以簡寫為rails c) 進入主控台模式做練習


新增一個 Migration 檔案
rails g migration migration_name
class MigrationName < ActiveRecord::Migration
  def up
    end

      def down
        end
        end
在這個類別中，包含了兩個類別方法分別是 up 和 down。其中 up 會在執行這個 migration 時執行，
反之 down 會在滾回(Roll back)這個 Migration 時執行。
例如，我們在 up 時新增一個資料庫表格(table)，那麼就可以在 down 的時候把這個table刪除。


create_table(name, options) 新增資料表
drop_table(name) 移除資料表
rename_table(old_name, new_name) 修改資料表名稱
change_table 修改資料表欄位



欄位也還有一些參數可以設定：
null: 是否允許NULL，預設是允許
default: 預設值
limit: 用於string、text、integer、binary指定最大值

Migration 搭配的 Rake 任務
rake db:create 依照目前的 RAILS_ENV 環境建立資料庫
rake db:create:all 建立所有環境的資料庫
rake db:drop 依照目前的 RAILS_ENV 環境刪除資料庫
rake db:drop:all 刪除所有環境的資料庫
rake db:migrate 執行Migration動作
rake db:rollback STEP=n 回復上N個 Migration 動作
rake db:migrate:up VERSION=20080906120000 執行特定版本的Migration
rake db:migrate:down VERSION=20080906120000 回復特定版本的Migration
rake db:version 目前資料庫的Migration版本
rake db:seed 執行 db/seeds.rb 載入種子資料


	Seed
種子資料Seed的意思是，有一些資料是應用程式跑起來必要基本資料，而這些資料的產生我們會放在db/seeds.rb這個檔案。

2013/10/14
Web server in ruby on rail:WEBrick
the most popular web server in the world:Apache


 HTTP Verbs 就是對應 CRUD：
POST = 新增
GET = 讀取
PUT = 更新
DELETE = 刪除



ORM-Object-relational mapping
ActiveRecord 是 Rails 的 ORM 元件，負責與資料庫溝通，讓我們可以用物件導向的語法操作資料庫。
是一種對映設關聯式資料與物件資料的程式技術。物件導向和從數學理論發展出來的關聯式資料庫，有著顯著的區別，而 ORM 正是解決這個不匹配問題所產生的工具。它可以讓你使用物件導向語法來操作關聯式資料庫，非常容易使用、撰碼十分有效率，不需要撰寫繁瑣的SQL語法，同時也增加了程式碼維護性。
是一種程式設計技術，用於實現物件導向編程語言裡不同類型系統的資料之間的轉換。從效果上說，它其實是創建了一個可在編程語言裡使用的「虛擬對象資料庫」
物件導向是從軟體工程基本原則（如耦合、聚合、封裝）的基礎上發展起來的，而關聯式資料庫則是從數學理論發展而來的，兩套理論存在顯著的區別。為了解決這個不匹配的現象，物件關聯對映技術應運而生。
ActiveRecord可以用Associations來定義資料表之間的關聯性，這是最被大家眼睛一亮ORM功能。
透過primary key和foreign keys將資料表互相關連起來。

SQL injection
Convention over configuration
is a software design paradigm which seeks to decrease the number of decisions that developers need to make, gaining simplicity, but not necessarily losing flexibility.



View
Html haml


	Validation 資料驗證
validates_presence_of 是最常用的規則，用來檢查資料為非 nil 或空字串。
class Person < ActiveRecord::Base
 validates_presence_of :name
 validates_presence_of :login
 validates_presence_of :email
end
validates_length_of 會檢查字串的長度
validates_numericality_of 會檢查必須是一個數字，以及數字的大小


	回呼 Callback
回呼可以在Model資料的生命週期，掛載事件上去，例如我們可以在資料儲存進資料庫前，做一些修正，或是再儲存成功之後，做一些其他動作。回呼大致可以分成三類：
在Validation驗證前後 2. 在儲存進資料庫前後 3. 在從資料庫移除前後

回呼的方法最好放在protected或private下，確保從Model外部是無法呼叫的。
before_validation和before_save的差別在於後者不會經過Validation資料驗證。
請避免before_開頭的回呼方法中，最後運算的結果不小心回傳false。這樣會中斷儲存程序。如果不確定的話，請回傳return true。這算是常見的地雷，而且不容易除錯(你會發現資料莫名地無法儲存成功)。
	Event-driven 事件驅動程式設計
是一種電腦程式設計模型。這種模型的程式執行流程是由使用者的動作（如滑鼠的按鍵，鍵盤的按鍵動作）或者是由其他程式的訊息來決定的。
	Stateless service
1.不會記住(retain)之前的連線 
2.每個request都被視為是唯一且獨立的 
舉例來說，我在Yahoo首頁點下新聞，進入Yahoo新聞的頁面，跟我直接在網址列中打上http://tw.news.yahoo.com/取得的結果是一樣的，我想要看Yahoo新聞不見得要經過進入Yahoo首頁(http://tw.yahoo.com/)的動作，也就是說我可不可以看Yahoo新聞只跟我有沒有連到http://tw.news.yahoo.com/這個網址有關，而與我前面的步驟無關，這種情況，我們稱之為Stateless。 
但網頁有沒有可能是Stateful(有狀態)呢？當然是有可能的，某些網頁會限制我們要先進行某些動作A後才能進入另一個畫面B，你沒有作過A想要直接request B畫面是不可行的，要達成Stateful的做法很多種，我們常見的Session就是其中一種，以博客來網路書店為例，如果我沒有登入，要直接看購物車的內容，就什麼都看不到

	OAuth（開放授權）(twitter facebook)
是一個開放標準，允許用戶讓第三方應用訪問該用戶在某一網站上存儲的私密的資源（如照片，視頻，聯繫人列表），而無需將用戶名和密碼提供給第三方應用。

使用者可以在不透露帳號密碼的情況下， 
授權第三方網路應用服務(在協定中稱為Consumer)使用(或登入)原本的網路服務(在協定稱為Service Provider)。 
例如我們可以利用oauth的方式在自己撰寫的網站登入twitter, google, yahoo或foursquare等網站， 
並使用其開放出來的網路服務

	Load balancing
是一種計算機網路技術，用來在多個計算機(計算機集群)、網路連接、CPU、磁碟驅動器或其他資源中分配負載，以達到優化資源使用、最大化吞吐率、最小化響應時間、同時避免過載的目的。



	NoSQL
是對不同於傳統的關係型資料庫的資料庫管理系統的統稱。
兩者存在許多顯著的不同點，其中最重要的是NoSQL不使用SQL作為查詢語言。其數據存儲可以不需要固定的表格模式，也經常會避免使用SQL的JOIN操作，一般有水平可擴展性的特徵。NOSQL的實現具有二個特徵: 使用硬碟, 或者把隨機存儲器作存儲載體。
觀念 1  NoSQL是Not Only SQL 
因為SQL語言是關聯式資料庫的標準查詢語言，原本NoSQL資料庫用來代表那些無法提供SQL語言查詢的資料庫系統，這些資料庫系統大多是開源的分散式資料庫系統，不過，也有少數商用資料庫系統具有NoSQL的特性，例如微軟Azure平臺上儲存資料的方式。 

今年開源社群則出現了另外一個新的定義方式，將NoSQL視為「Not Only SQL」，不只是SQL的意思，也就是說混用關聯式資料庫和NoSQL資料庫來達成最佳的儲存效果，例如前面舉的力可科技就是用NoSQL資料庫來儲存資料量大的用戶狀態資料，但其他資料仍然使用關聯式資料庫，以便善用SQL語法的好處。 

觀念 2 增加機器就能自動擴充資料庫容量 
NoSQL資料庫的另一個重要特性是具有水平擴充能力，只要增加新的伺服器節點，就可以不斷擴充資料庫系統的容量。而且可以利用低價的一般等級電腦就能進行水平擴充，不像關聯式資料庫的叢集系統往往需要效能和容量較大的伺服器才能勝任。NoSQL資料庫可以用更低的成本打造出TB等級或PB等級的大型資料庫系統。 

有些NoSQL資料庫甚至可以在不停機或不影響應用程式的情況下，線上就能直接擴充資料庫系統的容量。 

舉例來說，Cassandra可以動態擴充新的資料庫節點，只要啟動新的資料庫節點，舊有的資料庫節點會自動將資料複製到新節點中，平衡彼此的資料存取負載。不用像常見的資料庫切割作法那樣，必須手動進行資料庫的去正規化、切割資料表、複製資料、指定應用程式連結等過程。 

簡單來說，水平擴充能力的意思就是只要增加新的伺服器設備，就能自動增加資料庫的容量，從管理角度來看，這也可以減少長期維護資料庫的人力。 

觀念 3 打破Schema欄位架構的限制 
關聯式資料庫必須透過資料庫的Schema欄位架構來確立資料表之間的關聯，Schema通常是事先設計好的架構，上線以後要進行欄位變更非常麻煩，尤其資料量龐大時要變更Schema的難度很高，例如Twitter為了調整資料欄位，光是執行Alter Table指令來改變資料表的定義就跑了一個禮拜。 

NoSQL資料庫則是改用Key-Value資料模式來解決龐大資料的異動困難。Key-Value模式是將一筆資料的結構簡化到只有一個Key值對應到一個Value值，每一筆資料之間沒有關連性，所以，可以任意切割或調整，也可以分散到不同的伺服器中建立副本。 

有些NoSQL資料庫則是增加了Column的觀念，用法上等於是可以用更多的Key值來對應Value，例如Cassandra就提供了4層或5層Key-Value的資料結構，可以用3個Key來對應1個Value值。例如用「使用者帳號」、「個人檔案」、「生日」這三個Key值來取得某一個用戶的生日日期。採用Column設計的NoSQL資料庫會比只用Key-Value資料架構的資料庫更有彈性，減少資料存取程式的開發難度。 

因為NoSQL資料庫沒有Schema架構，所以，也無法支援標準的SQL語法來查詢資料。NoSQL資料庫通常是透過簡單的API來新增、更新或刪除資料庫中的內容，有些資料庫則會提供類似SQL語法中的Select查詢機制，不過通常也無法執行複雜的Join指令，例如Google App Engine就提供了GQL語法讓開發者查詢BigTable上的資料。 

觀念 4 資料遲早會一致 
為了確保資料的完整性，關聯式資料庫採用的交易（Transaction）的設計，讓資料存取或異動過程中不會受到干擾。Transaction資料庫的特性就是ACID，在SQL執行過程中，確保有交易作為最小運作單位（Atomicity）、異動過程確保整體資料庫的一致性（Consistency）、執行多筆交易時能隔離交易中的資料不受其他交易影響（Isolation）以及交易過程不會變動原始資料的持久性（Durability）。 

但是ACID架構的資料庫擴充不易，所以，NoSQL資料庫大多沒有交易的設計，而是採用了另外一個不同的CAP資料庫理論。 

CAP理論有三個關鍵，包括資料一致性（Consistent）、可用性（Availability）和中斷容忍性（Partition Tolerance）。理論上無法同時兼顧CAP這三種特性，所以，NoSQL資料庫通常會選擇其中兩種特性來設計，通常是選擇CP或AP。 

多數NoSQL資料庫選擇的是CP的設計，不過，NoSQL資料庫中談的資料一致性和關聯式資料庫的意義不同。NoSQL資料庫會採取Eventually Consistency（資料遲早會一致）的作法，因為NoSQL的分散式設計會將資料分散複製到不同節點中，每個節點各自也能異動資料，然後再彼此同步。同步過程就會有時間落差，若同時讀取不同節點上的資料，會發生資料不一致的情況。 

NoSQL資料庫為了保持分散式的擴充架構，容許這樣的情況，只有保證最後資料會達到一致。而在資料尚未同步的短暫時間內就需要開發者自行解決資料衝突或遺失的問題，或者是用NoSQL資料庫來記錄那些對精確度要求較低的資料，例如Facebook的贊按鈕，即使少了幾個贊的記錄，使用者也不容易發現，就適合用NoSQL資料庫來儲存。導入NoSQL資料庫時，開發者得先評估資料的性質，是否能承擔資料遺失的風險。 

觀念 5 成熟度不足，版本升級風險高 
因為近幾年Web 2.0網站和社交網站的盛行，才開始出現用NoSQL資料庫解決使用者貢獻資料的暴漲問題。很多NoSQL資料庫都是這2、3年內才出現，所以，資料庫本身的功能還不完整，也較少出現成熟穩定的版本，版本升級過程中很容易會出現不相容的情形。 

另一方面，這類資料庫大多透過API來存取資料，新的版本若增加了新的功能，也會改變這些API的參數或呼叫方式。對開發者而言，等於得重新修改應用程式，才能正確取得資料庫中的內容。甚至是資料庫本身儲存的檔案格式也會變化，升級新版本資料庫後，反而無法讀取舊版檔案，必須進行格式轉檔的工作。 


