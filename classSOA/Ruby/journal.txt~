github
帳號:SOA2013-102078518

交作業 cd Document/
       git init
       git add classSOA
git commit -m "first commit"
       git status
       git remote add origin https://github.com/SOA2013-102078518/classSOA.git
 >> https://github.com/id/repo.git
git push -u origin master

 
ls .. 告訴我有哪些folder higher than me 
$sudo  run anything as i am the root 我不是root但以root的方式對我 讓我可以安裝一些東西
$ ls../.. 
~ where ur home
sqlite: database u use

ls public 

在URL中輸入: localhost:3000
WEBrick  port=3000
robots.txt 是一種存放於網站根目錄下的ASCII編碼的文字檔案，它通常告訴網路搜尋引擎的漫遊器（又稱網路蜘蛛），此網站中的哪些內容是不應被搜尋引擎的漫遊器獲取的，哪些是可以被（漫遊器）獲取的。

github要下載SSH Key:因為不希望大家去上傳與下載code

mkdir xx 建立目錄

vi 000 (000是檔名)建立/編輯文件
i開始編輯
esc + : wq
gitconfig

定義方法:def()

移動所在目錄 cd XXX
移動到上一層目錄cd ..
顯示目前所在目錄pwd
顯示目前目錄的檔案ls
刪除檔案rm XXX
刪除目錄rm XXX

注意檔案的格式要儲存成UTF-8，無BOM(byte-order mark)表頭

在Ruby中，方法中還可以定義方法
 
“anna”.reverse
"Jimmy".length 
"Jimmy" * 5 

40.to_s.reverse>> "04"

to_s converts things to strings.
to_i converts things to integers (numbers.)
to_a converts things to arrays.
xxx=[]
xxx.sort

poem['toas¬t'] = 'hone¬ydew' >>將toas¬t取代成
 
2013/09/30
3.times{print”we love ruby!”}
“hello”.reverse
“hello”.up
“hello”.upcase >>”HELLO”
(1..10)>>1..10

(1..10).all?{|num| num>0
True

(1..10).all?{|num| num>2
false

(1..10).any?{|num| num>8
True

(1..10).any?{|num| num>11
False

(1..10).reduce(:+)
55

(1..10).reduce(:*)




 
2013/10/6
tryruby HW_BOLG
Popup.make¬ do
  h1 "This is anna blog"
  list do
   blog.each do |entry|
  h2 entry.title
  p entry.fulltext
  p entry.time
end   
    end
  end

emacs blog.rb
class BlogEntry >>建一個新class
def initialize{title,mood,fulltext}
@time=Time.now
@title=title
@mood=mood
@ fulltext = fulltext
End
End


在irb下
Load “blog.rb”
Entry=BlogEntry.new(“My First Entry!”:happy,”this is the first thing I have entered”)
Entry2= BlogEntry.new(“My Second Entry!”:okay,”this is the second thing I have entered”)


blogList=[ Entry, Entry2]
blogList.length
blogList[0]>>列出
blogList[1]
blogList.map{ |ent| ent.title}


 “happy”-string of 字母
:happy-symbol




class TechBlogEntry <BlogEntry >>建一個TechBlogEntry繼承BlogEntry的特性
def initialize{title,mood,fulltext,topic} >>topic是superclass所沒有的
@topic=topic

End
End

Load “blog.rb”
New entry=TechBlogEntry.new(“tech Entry1 !”:excited,”this is the first technal entry about ruby”,:ruby)


 
2013/10/7
2.1 Creating and Editing Files
nano (text editing)

We are going to use nano to make a new file calledscience.txt 
% cd ~
% nano science.txt

2.2 Copying Files
cp file1 file2 is the command which makes a copy of file1 in the current working directory and calls it file2

2.3 Moving files
mv file1 file2 moves (or renames) file1 to file2

2.4 Removing files and directories

rm (remove), rmdir (remove directory)
clear (clear screen)
% clear

cat (concatenate)
The command cat can be used to display the contents of a file on the screen. Type:
% cat science.txt
less
The command less writes the contents of a file onto the screen a page at a time. Type
% less science.txt
/science >>在science.txt搜尋slience這個單字
grep
% grep science science.txt
% grep -i science science.txt >>會忽略大小寫(Science 跟science )差異
% grep -i 'spinning top' science.txt >>搜尋phrase or pattern
-v display those lines that do NOT match 
-n precede each maching line with the line number 
-c print only the total count of matched lines 
wc (word count)
% wc -w science.txt >>算science.txt的字數
% wc -l science.txt >>算science.txt的行數

cp file1 file2	copy file1 and call it file2
mv file1 file2	move or rename file1 to file2
rm file	remove a file
rmdir directory	remove a directory
cat file	display a file
more file	display a file a page at a time
head file	display the first few lines of a file
tail file	display the last few lines of a file
grep 'keyword' file	search a file for keywords
wc file	count number of lines/words/characters in file

 Tutorial 3

command > file	redirect standard output to a file
command >> file	append standard output to a file
command < file	redirect standard input from a file
command1 | command2	pipe the output of command1 to the input of command2
cat file1 file2 > file0	concatenate file1 and file2 to file0
sort	sort data
who	list users currently logged in
a2ps -Pprinter textfile	print text file to named printer
lpr -Pprinter psfile	print postscript file to named printer

Tutorial 4 
% ls list* >> This will list all files in the current directory starting with list....
% ls *list
This will list all files in the current directory ending with ....list
*	match any number of characters
?	match one character
man command	read the online manual page for a command
whatis command	brief description of a command
apropos keyword	match commands with keyword in their man page




Array
Array.new
Shelf= Array.new
shelf=["anna","hua","mimi"]
shelf.length
shelf[0]  “anna”
shelf<<"mom"
shelf.reverse!  ["mom", "mimi", "hua", "anna"]>>加驚嘆號才會reverse
shelf.reverse   ["anna", "hua", "mimi", "mom"]

       0                 1                 2                3
anna	hua	mimi	Mom

Hash
directory=Hash["anna"=>"0912867721","hua"=>"0912689351"]
directory keys
directory.value
directory.map{|name,phone|print”#{name}:#{phone}”}>>在同一行顯示
directory.map{|name,phone|puts”#{name}:#{phone}”} >>可換行顯示
= directory.map{|name,phone|print”#{name}:#{phone}\n”}



nano
emacs blog.rb




entry.title>>會出現錯誤，因為無法從class外部更改 read他們
要先attr_accessor:title,:mood,:fulltext,:time

Blog.map{|ent| ent.title}


curl –c “cookies.txt” http://google.com >>catch url
curl –b “cookies.txt”







Telnet
Telnet協議是TCP/IP協議族的其中之一，是Internet遠端登錄服務的標準協議和主要方式，常用於網頁伺服器的遠端控制，可供使用者在本地主機執行遠端主機上的工作。
使用者首先在電腦執行Telnet程序，連線至目的地伺服器，然後輸入帳號和密碼以驗證身份。使用者可以在本地主機輸入命令，然後讓已連接的遠端主機執行，就像直接在對方的控制台上輸入一樣。


SMTP(Simple Mail Transfer Protocol) 簡單郵件傳輸協議

MVC(Model-View-Controller)

>>Separated Presentation
MVC→SmallTalk

軟體系統分為三個基本部分：模型（Model）、檢視（View）和控制器（Controller）
模型（Model） 「資料模型」（Model）用於封裝與應用程式的業務邏輯相關的資料以及對資料的處理方法。「模型」有對資料直接存取的權力，例如對資料庫的存取。「模型」不依賴「檢視」和「控制器」，也就是說，模型不關心它會被如何顯示或是如何被操作。但是模型中資料的變化一般會透過一種重新整理機制被公布。為了實作這種機制，那些用於監視此模型的檢視必須事先在此模型上註冊，從而，檢視可以了解在資料模型上發生的改變。
檢視（View） 檢視層能夠實作資料有目的的顯示（理論上，這不是必需的）。在檢視中一般沒有程式上的邏輯。為了實作檢視上的重新整理功能，檢視需要存取它監視的資料模型（Model），因此應該事先在被它監視的資料那裡註冊。
控制器（Controller） 控制器起到不同層面間的組織作用，用於控制應用程式的流程。它處理事件並作出響應。「事件」包括使用者的行為和資料模型上的改變。
 
這張圖示中的執行步驟是：
1.	瀏覽器發出HTTP request請求給Rails
2.	路由(Routing)根據規則決定派往哪一個Controller的Action
3.	負責處理的Controller Action操作Model資料
4.	Model存取資料庫或資料處理
5.	Controller Action將得到的資料餵給View樣板
6.	回傳最後的HTML成品給瀏覽器

CRUD
即為Create、Read、Update、Delete等四項基本資料庫操作

WEBrick
 providing simple HTTP web server services
 
課本4.1 
cd Documents
rails new myrottoenpotatoes –T  >>new 新的app
>>app 目錄是你主要工作的地方，不同子目錄存放了 Models、Controllers、Views、Helpers 和 Assets 等檔案。
cd myrottoenpotatoes
cat Gemfile
vi Gemfile
# use Haml for templates
gem 'haml'
# use Ruby debugger
group :development, :test do
  gem 'debugger'
end

Gemfile 設定你的 Rails 應用程式會使用哪些 Gems
log/
不同執行環境的 log 檔案會分別記錄在這裡

config/
雖然 Rails 的原則是慣例優於設定，不過還是有一些需要設定的地方。這個目錄下存放了例如資料庫設定檔 database.yml、路由設定 routes.rb、應用程式設定檔 application.rb 和不同執行環境的設定檔在 config/environments 目錄下。




一開始連到index畫面http://localhost:3000/
如果http://localhost:3000/movies 的話就會發生錯誤

後來到config/route.rb檔redirect
Myrottenpotatoes::Application.routes.draw do
 resources :movies
root :to => redirect('/movies')
end

在URL輸入http://localhost:3000/movies
出現uninitialized constant MoviesController 
2013/10/9
http://ruby-doc.org/core-2.0.0/Array.html
everything is object
ex:
“abc”==”ABC”  >>false
“abc”==”abc” >>true
“abc”>”bac” >>true

“abc” ==”ABC”.downcase >>true


purts”hello\n world”
>>hello
world
nil


puts “hollo world”
puts ‘hollo world’  >> ‘’ 跟””不同!!!


Name=”anna”
Puts ”hello #{name}” >>hello  ana
Puts ‘hello #{name} ‘ >> hello #{name} 


Nest(巢狀) >>可以在array中建array



Ex nums=[2,3,1,4,6,7]
Num << 5
nums=[2,3,1,4,6,7,5]
removing out stuff from array
num.delete_at(2) >>會return delete的東西
>>但要小心，如果有相同的number,可能會兩個都刪掉

Num.index(?)


Nums.seclect{ |a| a>3} >>會顯示剩下大於3的array

Num.map{ |a| a>3} >>會用陣列顯示陣列中的數字是否大於三 (true or false)
Num.map{ |a| a*3} >>會將陣列中的數字全部*3 然後以相同大小的陣列顯示結果
Nums.reduce >>take ur array 
			
    
	


  

Nums.reduce(:+)
Nums.reduce(:*)

Nums.reduce{|a,b|a+b}
Nums.reduce{|a,b|a.to_s+”-”+b.to.s}


mixed.each

 
hash
http://ruby-doc.org/core-2.0.0/Hash.html

A Hash is a dictionary-like collection of unique keys and their values. Also called associative arrays, they are similar to Arrays, but where an Array uses integers as its index, a Hash allows you to use any object type.
Hashes enumerate their values in the order that the corresponding keys were inserted.


hash.new()

hash的index可以是任何東西

gtade={“anna”=>:A_plus,”hua”=>:B_plus}

grade[“anna”] >>anna是key(index)

grade.keys >>會顯示所有你可以用的key
grades.has_key?(“anna”) >>true
grade.to_a >>將hash轉成array
grade_array[0] >>會顯示[“anna”, :A_plus]

grade_array.map{|grade| puts “#grade[0]} got a #grade[0]}”}

delete(key) → valueclick to toggle source
delete(key) {| key | block } → value

delete_if {| key, value | block } → hshclick to toggle source
delete_if → an_enumerator
h = { "a" => 100, "b" => 200, "c" => 300 }
h.delete_if {|key, value| key >= "b" }   #=> {"a"=>100}
>>因為 a>b


#{key}
>>顯示key的內容



http://stackoverflow.com/questions/5046831/why-use-rubys-attr-accessor-attr-reader-and-attr-writer
attr_accessor :var
attr_reader :var
attr_writer :var


ex: class Person
  attr_accessor :age
  ...
end
Here, I can see that I may both read and write the age.

class Person
  attr_reader :age
  ...
end
Here, I can see that I may only read the age. 



 
2013/10/21
Validation 資料驗證
validates_presence_of 是最常用的規則，用來檢查資料為非 nil 或空字串。
class Person < ActiveRecord::Base
 validates_presence_of :name
 validates_presence_of :login
 validates_presence_of :email
end
validates_length_of 會檢查字串的長度
validates_numericality_of 會檢查必須是一個數字，以及數字的大小


回呼 Callback
回呼可以在Model資料的生命週期，掛載事件上去，例如我們可以在資料儲存進資料庫前，做一些修正，或是再儲存成功之後，做一些其他動作。回呼大致可以分成三類：
在Validation驗證前後 2. 在儲存進資料庫前後 3. 在從資料庫移除前後

回呼的方法最好放在protected或private下，確保從Model外部是無法呼叫的。
before_validation和before_save的差別在於後者不會經過Validation資料驗證。
請避免before_開頭的回呼方法中，最後運算的結果不小心回傳false。這樣會中斷儲存程序。如果不確定的話，請回傳return true。這算是常見的地雷，而且不容易除錯(你會發現資料莫名地無法儲存成功)。
	Event-driven 事件驅動程式設計
是一種電腦程式設計模型。這種模型的程式執行流程是由使用者的動作（如滑鼠的按鍵，鍵盤的按鍵動作）或者是由其他程式的訊息來決定的。
	Stateless service
1.不會記住(retain)之前的連線 
2.每個request都被視為是唯一且獨立的 
舉例來說，我在Yahoo首頁點下新聞，進入Yahoo新聞的頁面，跟我直接在網址列中打上http://tw.news.yahoo.com/取得的結果是一樣的，我想要看Yahoo新聞不見得要經過進入Yahoo首頁(http://tw.yahoo.com/)的動作，也就是說我可不可以看Yahoo新聞只跟我有沒有連到http://tw.news.yahoo.com/這個網址有關，而與我前面的步驟無關，這種情況，我們稱之為Stateless。 
但網頁有沒有可能是Stateful(有狀態)呢？當然是有可能的，某些網頁會限制我們要先進行某些動作A後才能進入另一個畫面B，你沒有作過A想要直接request B畫面是不可行的，要達成Stateful的做法很多種，我們常見的Session就是其中一種，以博客來網路書店為例，如果我沒有登入，要直接看購物車的內容，就什麼都看不到

	OAuth（開放授權）(twitter facebook)
是一個開放標準，允許用戶讓第三方應用訪問該用戶在某一網站上存儲的私密的資源（如照片，視頻，聯繫人列表），而無需將用戶名和密碼提供給第三方應用。

使用者可以在不透露帳號密碼的情況下， 
授權第三方網路應用服務(在協定中稱為Consumer)使用(或登入)原本的網路服務(在協定稱為Service Provider)。 
例如我們可以利用oauth的方式在自己撰寫的網站登入twitter, google, yahoo或foursquare等網站， 
並使用其開放出來的網路服務

	Load balancing
是一種計算機網路技術，用來在多個計算機(計算機集群)、網路連接、CPU、磁碟驅動器或其他資源中分配負載，以達到優化資源使用、最大化吞吐率、最小化響應時間、同時避免過載的目的。

	ORM Object-relational mapping
是一種程式設計技術，用於實現物件導向編程語言裡不同類型系統的資料之間的轉換。從效果上說，它其實是創建了一個可在編程語言裡使用的「虛擬對象資料庫」
物件導向是從軟體工程基本原則（如耦合、聚合、封裝）的基礎上發展起來的，而關聯式資料庫則是從數學理論發展而來的，兩套理論存在顯著的區別。為了解決這個不匹配的現象，物件關聯對映技術應運而生。
ActiveRecord可以用Associations來定義資料表之間的關聯性，這是最被大家眼睛一亮ORM功能。
透過primary key和foreign keys將資料表互相關連起來。

